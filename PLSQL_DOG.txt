DROP TABLE COMPETITOR;
DROP TABLE DOG;
DROP TABLE EVENT;
DROP TABLE JUDGES;
DROP TABLE SCORE_EVENT;



CREATE TABLE COMPETITOR
(ID_C INT,
ID_D INT,
NAME VARCHAR(15),
SURNAME VARCHAR(15),
STATE VARCHAR(20));

INSERT INTO COMPETITOR VALUES
(20, 10, 'ALEX', 'MARTYNEK', 'MAINE');
INSERT INTO COMPETITOR VALUES
(21, 11, 'ROBERT', 'KNOWLTON', 'MASSACHUSETTS');
INSERT INTO COMPETITOR VALUES
(22, 12, 'PATRIK', 'JAGIELSKI', 'NEW JERSEY');
INSERT INTO COMPETITOR VALUES
(23, 13, 'VERONIKA', 'MARTEL', 'MAINE');
INSERT INTO COMPETITOR VALUES
(24, 14, 'OLIVIA', 'LANNISTER', 'NEW JERSEY');

CREATE TABLE DOG
(ID_D INT,
BREED VARCHAR(15),
D_SIZE VARCHAR(15),
DOB DATE);

INSERT INTO DOG VALUES
(10, 'SHITZU', 'SMALL', TO_DATE('10-MAR-2010', 'DD-MON-YYYY'));
INSERT INTO DOG VALUES
(11, 'GERMAN SHEPHERD', 'LARGE', TO_DATE('14-MAY-2010', 'DD-MON-YYYY'));
INSERT INTO DOG VALUES
(12, 'HUSKY', 'LARGE', TO_DATE('19-JUL-2015', 'DD-MON-YYYY'));
INSERT INTO DOG VALUES
(13, 'POMERANIAN', 'MEDIUM', TO_DATE('25-DEC-2009', 'DD-MON-YYYY'));
INSERT INTO DOG VALUES
(14, 'HUSKY', 'LARGE',  TO_DATE('25-OCT-2005', 'DD-MON-YYYY'));

CREATE TABLE SCORE_EVENT
(SCORE_EVENT_ID INT,
ID_D INT,
EVENT_ID INT,
SCORE INT,
JUDGE_ID INT);

INSERT INTO SCORE_EVENT VALUES
(1, 10, 1, 30, 1);
INSERT INTO SCORE_EVENT VALUES
(2, 13, 1, 50, 2);
INSERT INTO SCORE_EVENT VALUES
(3, 11, 2, 60, 3);
INSERT INTO SCORE_EVENT VALUES
(4, 12, 3, 80, 4);
INSERT INTO SCORE_EVENT VALUES
(5, 14, 1, 90, 2);

CREATE TABLE EVENT
(EVENT_ID INT,
EVENT_DES VARCHAR(10),
EVENT_DATE DATE);

INSERT INTO EVENT VALUES
(1, 'BEAUTY', TO_DATE('15-JUL-2019', 'DD-MON-YYYY'));
INSERT INTO EVENT VALUES
(2, 'GRACE', TO_DATE('16-JUL-2019', 'DD-MON-YYYY'));
INSERT INTO EVENT VALUES
(3, 'TALENT', TO_DATE('17-JUL-2019', 'DD-MON-YYYY'));

CREATE TABLE JUDGES
(ID_J INT,
JUDGE_INFO VARCHAR(255),
J_NAME VARCHAR(10),
SURNAME VARCHAR(15));

INSERT INTO JUDGES VALUES
(1, 'JUDGING FOR 10 YEARS', 'LARRY', 'ABBOT');
INSERT INTO JUDGES VALUES
(2, 'JUDGING FOR 4 YEARS', 'MARY', 'ADELMAN');
INSERT INTO JUDGES VALUES
(3, 'JUDGING FOR 9 YEARS', 'DIANE', 'ANDERSON');
INSERT INTO JUDGES VALUES
(4, 'JUDGING FOR 3 YEARS', 'DON', 'GILL');

CONNECTING TABLES
SELECT ID_D, BREED, EVENT_DESC
FROM DOG, EVENTS;

SELECT SURNAME, BREED
FROM COMPETITOR, DOG
WHERE COMPETITOR.ID_DOG = DOG.ID_DOG
ORDER BY SURNAME;

AGG FUNCTIONS
SELECT SCORE, BREED, OWNDER_ID
FROM DOG, SCORE_EVENT
WHERE DOG.ID_DOG = SCORE_EVENT.ID_DOG
HAVING SCORE > 50;

SELECT AVG(DOB)
FROM DOG;

SUBQUERIES
SELECT SCORE, SIZE
FROM DOG
JOIN SCORE_EVENT ON DOG.ID_DOG = SCORE_EVENT.ID_DOG
WHERE SIZE IN(SELECT SIZE
FROM DOG
WHERE SIZE = 'LARGE');

SELECT DOB, BREED
FROM DOG
WHERE DOB > 5;

CORRELATED SUBQUERIESF
SELECT SURNAME, BREED, SIZE, EVENT_DESC
FROM COMPETITOR
JOIN DOG ON COMPETITOR.ID_DOG = DOG.ID_DOG
WHERE SIZE NOT IN (SELECT SIZE,
FROM DOG
WHERE SIZE = 'LARGE');

SELECT SURNAME, STATE, BREED, DOB
FROM COMPETITOR
JOIN DOG ON COMPETITOR.ID_DOG = DOG.ID_DOG
WHERE BREED IN(SELECT BREED 
FROM DOG
WHERE BREED// IS THE SAME//)
AND STATE IN (SELECT STATE
FROM COMPETITOR
WHERE STATE //IS THE SAME//);

Queries:
2 connecting tables:
	1)Dog and event
	2)Name of owner and Dog/Competitor's score
2 using group functions(agg functions)
	1)AVG  SCORE OF EACH EVENT ONLY SHOW EVENTS WITH AVG SCORE ABOVE 60;
	2)MAX SCORE OF EACH STATE
2 subqueries
	1)Scores of all the Large Dogs IN EVENT 2 AND 3
	2)EVENTS CONTAINING NO LARGE DOGS
2 correlated subqueries
	1)DOG WITH HIGHEST SCORE IN EACH EVENT
	2)Show competitor info where dogs are of the same breed 
	and same state

SET SERVEROUTPUT ON
CREATE TRIGGER ADD_NEW_COMP;
BEFORE INSERT
ON COMPETITOR FOR EACH ROW
WHEN (MAX(SCORE) > 50)
BEGIN
SELECT NVL(MAX(ID_C+1), 1) INTO: NEW.ID_C FROM COMPETITOR;
END;

SET SERVEROUTPUT ON
CREATE OR TRIGGER ADD_NEW_SCORE;
BEFORE UPDATE
ON SCORES_EVENT FOR EACH ROW
BEGIN
IF JUDGE_ID = 2 THEN
(SCORE +5);
END;


SET SERVEROUPUT ON
CREATE TRIGGER DEL_EVENT
BEFORE DELETE
ON EVENT FOR EACH ROW
BEGIN
DBMS_OUPUT.PUT_LINE ('You deleted an event!');
END;

DELETE FROM EVENT WHERE EVENT_DESC = 'BEAUTY';

SET SERVEROUTPUT ON
CREATE TRIGGER NEW_DOG
AFTER INSERT
ON DOG FOR EACH ROW
BEGIN
INSERT INTO DOG VALUES(:NEW.ID_D,:NEW.BREED,:NEW.D_SIZE,:NEW.DOB)
END;

SET SERVEROUTPUT ON
CREATE TRIGGER NEW_SCORE
AFTER UPDATE
ON SCORE_EVENT FOR EACH ROW
BEGIN
DBMS_OUTPUT.PUT_LINE(' NEW DOG HAS ENTERED THE COMP');
END;

SET SERVEROUTPUT ON
CREATE TRIGGER DELETE_DOGS
AFTER DELETE
ON SCORE_EVENT
BEGIN
SELECT EVENT_ID FROM SCORE_EVENT WHERE EVENT_ID = 1;
DBMS_OUTPUT.PUT_LINE('WE HAVE DELETE EVENT '|| EVENT_ID);
END;

DELETE FROM SCORE_EVENT WHERE EVENT_ID = 1;
Triggers:
 Before - Insert (add new competitor to table competitor)
	- Update (scores of dogs)
	-Delete (Delete one of the events)
After - Insert (insert new dog when new competitor is added)
	- Update (after new dog is added, update that score)
	- Delete (Delete all dogs in the event)